#!/usr/bin/env python

import argparse
import os
import re
import yumsync
import shutil
import sys
import time
import yaml
from yumsync import util
from yumsync.log import log
from yumsync import yumrepo

class mycallback(object):
    def __init__(self, log_dirs=None):
        object.__init__(self)
        self.log_dirs = log_dirs

    def log(self, msg, header=None, repo_id=None):
        if repo_id in self.log_dirs:
            log_dir = self.log_dirs[repo_id]
        else:
            log_dir = None
        if repo_id:
            msg = '{0}: {1}'.format(repo_id, msg)
        log(msg, header=header, log_dir=log_dir)

    @staticmethod
    def sizeof_fmt(num, suffix='B'):
        for unit in ['','Ki','Mi','Gi','Ti','Pi','Ei','Zi']:
            if abs(num) < 1024.0:
                return '{0:3.1f}{1}{2}'.format(num, unit, suffix)
            num /= 1024.0
        return '{0:3.1f}{1}{2}'.format(num, 'Yi', suffix)

    def print_skipped(self, repo_id):
        if self.skippkg > 0:
            pkg_str = 'package' if self.skippkg == 1 else 'packages'
            reason = 'already available'
            self.log('skipping {0:d} {1} ({2})'.format(self.skippkg, pkg_str, reason), repo_id=repo_id)
            self.skippkg = 0 # reset after printing

    def gpgkey_exists(self, repo_id, keyname):
        self.log('GPG key already exists ({0})'.format(keyname), repo_id=repo_id)

    def gpgkey_download(self, repo_id, keyname):
        self.log('GPG key downloaded ({0})'.format(keyname), repo_id=repo_id)

    def gpgkey_error(self, repo_id, error):
        self.log('error downloading GPG key ({0})'.format(error), repo_id=repo_id)

    def repo_link_set(self, repo_id, link_type, target):
        self.log('{0} set to {1}'.format(link_type, target), repo_id=repo_id)

    def repo_init(self, repo_id, num_pkgs, islocal):
        self.totalpkg = num_pkgs
        self.finishpkg = 0
        self.skippkg = 0
        self.islocal = islocal
        if islocal:
            self.log('found {0:d} packages (local)'.format(num_pkgs), repo_id=repo_id)
        else:
            self.log('found {0:d} packages'.format(num_pkgs), repo_id=repo_id)

    def pkg_exists(self, repo_id, pkgname):
        self.skippkg += 1
        self.finishpkg += 1
        if self.totalpkg >= 1000 and self.skippkg >= int(round(self.totalpkg / 10, -2)):
            self.print_skipped(repo_id)

    def link_local_pkg(self, repo_id, pkgname, size):
        self.finishpkg += 1
        self.log('({0:d}/{1:d}) {2} ({3})'.format(self.finishpkg, self.totalpkg, pkgname, self.sizeof_fmt(size)), repo_id=repo_id)

    def delete_pkg(self, repo_id, pkgname):
        self.log('deleting package {0}'.format(pkgname), repo_id=repo_id)

    def repo_error(self, repo_id, error):
        self.log('error ({0})'.format(error), repo_id=repo_id)

    def repo_complete(self, repo_id):
        self.print_skipped(repo_id)
        self.print_linked(repo_id)
        self.log('package download complete', repo_id=repo_id)

    def download_start(self, repo_id, filename, url, basename, size, text):
        self.print_skipped(repo_id)
        self.print_linked(repo_id)

    def download_end(self, repo_id, package, size):
        if package.endswith('.rpm'):
            self.finishpkg += 1
            self.log('({0:d}/{1:d}) {2} ({3})'.format(self.finishpkg, self.totalpkg, package, self.sizeof_fmt(size)), repo_id=repo_id)

    def repo_metadata(self, repo_id, status):
        self.log('metadata is {0}'.format(status), repo_id=repo_id)

    def repo_group_data(self, repo_id, status):
        self.log('group data is {0}'.format(status), repo_id=repo_id)

# load configuration
def load_config():
    try:
        with open(REPOFILE, 'r') as f:
            config = yaml.safe_load(f)
            if type(config) != dict: raise SyntaxError
            return config
    except IOError as e:
        log("{0}: {1}".format(REPOFILE, e.strerror))
        sys.exit(1)
    except SyntaxError as e:
        log('configuration file needs to resolve to a dictionary (hash)')
        sys.exit(1)
    except yaml.YAMLError as e:
        log('unable to parse configuration file')
        if hasattr(e, 'problem_mark'):
            mark = e.problem_mark
            log('Error at Line {0:d}, column {1:d}'.format(mark.line+1, mark.column+1))
        sys.exit(1)

# filter repos passed via command line
def filter_repos(config):
    filtered = {}

    if CMDLINEREPOS:
        for name in CMDLINEREPOS:
            try:
                regex = re.compile(r"{0}".format(name), re.IGNORECASE)
                for r in [r for r in config if re.search(regex, r)]:
                    filtered[r] = config[r]
            except re.error:
                continue
    else:
        filtered = config

    return filtered

# setup public folders for repositories
def setup_public(repos):
    for repo in repos:
        head, tail = os.path.split(repo.public_dir)
        util.make_dir(repo.dir)
        util.make_dir(head)
        relative_path = os.path.relpath(repo.dir, head)
        # clean out symbolic_path if incorrect
        if os.path.islink(repo.public_dir):
            if os.readlink(repo.public_dir) != relative_path:
                os.unlink(repo.public_dir)
        elif os.path.isdir(repo.public_dir):
            shutil.rmtree(repo.public_dir)
        elif os.path.isfile(repo.public_dir):
            os.unlink(repo.public_dir)
        # setup symbolic link if missing
        if not os.path.lexists(repo.public_dir):
            os.symlink(relative_path, repo.public_dir)

def stable_links(repos):
    log('setting stable links', header=True)
    for repo in repos:
        if repo.version:
            if repo.stable:
                util.symlink(os.path.join(repo.dir, 'stable'), repo.stable)
                log('{0}: stable set to {1}'.format(repo.id, repo.stable))
            else:
                if os.path.lexists(os.path.join(repo.dir, 'stable')):
                    os.unlink(os.path.join(repo.dir, 'stable'))
        else:
            if os.path.lexists(os.path.join(repo.dir, 'latest')):
                os.unlink(os.path.join(repo.dir, 'latest'))
            if os.path.lexists(os.path.join(repo.dir, 'stable')):
                os.unlink(os.path.join(repo.dir, 'stable'))

def handle_repos(repos):
    log_dirs = {}
    for repo in repos:
        log_dirs[repo.id] = repo.log_dir

    mycallback_instance = mycallback(log_dirs)

    return yumsync.sync(repos, mycallback_instance)

def print_summary(repos, errors, elapsed):
    repo_str = 'repository' if repos == 1 else 'repositories'
    error_str = 'error' if errors == 1 else 'errors'
    log('{0:d} {1}, {2:d} {3}, {4}'.format(repos, repo_str, errors, error_str, elapsed), header=True)

def main():
    if SHOWVERSION == True:
        print(yumsync.__version__)
        sys.exit(0)

    log('parsing configuration', header=True, force=SHOWONLY)
    repo_config = filter_repos(load_config())

    repos = []
    for repoid in sorted(repo_config):
        try:
            repos.append(yumrepo.YumRepo(repoid, OUTDIR, repo_config[repoid]))
        except Exception as e:
            log('{0}: {1} (skipping)'.format(repoid, e))
            continue

    log('Repos to sync: {0:d}'.format(len(repos)), force=SHOWONLY)
    if len(repos) < 1: sys.exit(0)

    padding = len(str(len(repos)))
    for index, repo in enumerate(repos):
        repo_str = '{0} (local)'.format(repo.id) if repo.local_dir else repo.id
        log('{0:{1}d}) {2}'.format(index + 1, padding, repo_str), force=SHOWONLY)
    if SHOWONLY:
        log('Exiting without performing changes...', force=SHOWONLY)
        sys.exit(0)

    if STABLEONLY == True:
        stable_links(repos)
        sys.exit(0)

    log('syncing repositories', header=True)
    setup_public(repos)

    repos, errors, elapsed = handle_repos(repos)

    print_summary(repos, errors, elapsed)
    sys.exit(0)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Sync YUM repositories with optional versioned snapshots.')
    parser.add_argument('-o', '--directory', action='store', default=os.getcwd(),
        help='Path to output directory to store repositories, defaults to current directory')
    parser.add_argument('-c', '--config', action='store', default=os.path.join(os.getcwd(), 'repos.yml'),
        help='Path to YAML config file describing repositories, defaults to repos.yml in current directory')
    parser.add_argument('-n', '--name', action='append', required=False,
        help='Name of YUM repository (repeatable) from config file to sync instead of all available')
    parser.add_argument('-s', '--show', action='store_true', default=False,
        help='Only show what repositories would be synced')
    parser.add_argument('-v', '--version', action='store_true', default=False,
        help='Show version')
    parser.add_argument('--stable', action='store_true', default=False,
        help='Only set stable links for YUM repositories')
    args = parser.parse_args()
    REPOFILE     = args.config
    OUTDIR       = args.directory
    CMDLINEREPOS = args.name
    SHOWONLY     = args.show
    SHOWVERSION  = args.version
    STABLEONLY   = args.stable
    PUBLICDIR    = os.path.join(OUTDIR, 'public')
    main()
